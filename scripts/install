#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source experimental_helpers/ynh_exec_as
source experimental_helpers/ynh_composer__2
source experimental_helpers/ynh_send_readme_to_admin
source experimental_helpers/ynh_add_swap
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
language=$YNH_APP_ARG_LANGUAGE
title=$YNH_APP_ARG_TITLE
bazaar_extension=$YNH_APP_ARG_BAZAAR_EXTENSION

admin_pwd=$(ynh_string_random --length=8)
admin_mail=$(ynh_user_get_info --username=$admin --key=mail)

app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================
ynh_script_progression --message="Validating installation parameters..."

final_path=/var/www/$app
test ! -e "$final_path" || ynh_die --message="This path already contains a folder"

# Register (book) web path
ynh_webpath_register --app=$app --domain=$domain --path_url=$path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================
ynh_script_progression --message="Storing installation settings..."

ynh_app_setting_set --app=$app --key=domain --value=$domain
ynh_app_setting_set --app=$app --key=path --value=$path_url
ynh_app_setting_set --app=$app --key=admin --value=$admin
ynh_app_setting_set --app=$app --key=is_public --value=$is_public
ynh_app_setting_set --app=$app --key=language --value=$language
ynh_app_setting_set --app=$app --key=project_version --value=$project_version
ynh_app_setting_set --app=$app --key=core_version --value=$core_version
ynh_app_setting_set --app=$app --key=ssowat_version --value=$ssowat_version
ynh_app_setting_set --app=$app --key=bazaar_extension --value=$bazaar_extension

#=================================================
# STANDARD MODIFICATIONS
#=================================================
# INSTALL DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing dependencies..."  --weight=1

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE A MYSQL DATABASE
#=================================================
ynh_script_progression --message="Creating a MySQL database..."

db_name=$(ynh_sanitize_dbid --db_name=$app)
db_user=$db_name
ynh_app_setting_set --app=$app --key=db_name --value=$db_name
ynh_mysql_setup_db --db_user=$db_user --db_name=$db_name
ynh_app_setting_set --app=$app --key=db_pwd --value=$db_pwd

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================
ynh_script_progression --message="Setting up source files..." --weight=7

ynh_app_setting_set --app=$app --key=final_path --value=$final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source --dest_dir="$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Bug in Nginx with locations and aliases (see http://stackoverflow.com/a/35102259 )
if [ $path_url = "/" ]; then
  ynh_replace_string "__PATH_HACK__" "" "../conf/nginx.conf"
else
  ynh_replace_string "__PATH_HACK__" "$path_url" "../conf/nginx.conf"
fi

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Configuring system user..." --weight=1

# Create a system user
ynh_system_user_create --username=$app --home_dir=$final_path
# Adding it to www-data group
usermod -a -G www-data $app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Configuring php-fpm..."

# Create a dedicated php-fpm config
ynh_add_fpm_config --usage=low --footprint=low --package="$extra_php_dependencies"
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

#=================================================
# SPECIFIC SETUP
#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH CURRENT RAM
#=================================================
ynh_script_progression --message="Ensuring sufficient memory..." --weight=1

# Check RAM
if [[ $(ynh_get_ram --free) < 1000 ]]; then
  ynh_add_swap --size=1000
fi

#=================================================
# INSTALL COMPOSER DEPENDENCIES
#=================================================
ynh_script_progression --message="Installing composer dependencies..."

ynh_exec_warn_less ynh_install_composer --phpversion="$phpversion" --workdir="$final_path"

# Set Flarum version
ynh_composer_exec --user=$app --phpversion=$phpversion --workdir=$final_path \
  --commands="require flarum/core:$core_version --prefer-lowest --no-update"

# Require SSOwat extension
ynh_composer_exec --user=$app --phpversion=$phpversion --workdir=$final_path \
  --commands="require tituspijean/flarum-ext-auth-ssowat:$ssowat_version --no-update"

# Update and download dependencies
ynh_composer_exec --user=$app --phpversion=$phpversion --workdir=$final_path \
  --commands="update"

#=================================================
# FLARUM POST-INSTALL
#=================================================
ynh_script_progression --message="Configuring Flarum..." --time --weight=2

# Copy the configuration.yml to working directory
finalflarumconf="$final_path/configuration.yml"
cp ../conf/configuration.yml $finalflarumconf

# Populate configuration.yml
ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$finalflarumconf"
ynh_replace_string --match_string="/__PATH__" --replace_string="$path_url" --target_file="$finalflarumconf"
ynh_replace_string --match_string="__USER__" --replace_string="$app" --target_file="$finalflarumconf"
ynh_replace_string --match_string="__DB_PWD__" --replace_string="$db_pwd" --target_file="$finalflarumconf"
ynh_replace_string --match_string="__ADMIN__" --replace_string="$admin" --target_file="$finalflarumconf"
ynh_replace_string --match_string="__ADMIN_PWD__" --replace_string="$admin_pwd" --target_file="$finalflarumconf"
ynh_replace_string --match_string="__ADMIN_EML__" --replace_string="$admin_mail" --target_file="$finalflarumconf"
ynh_replace_string --match_string="__FORUM_TITLE__" --replace_string="$title" --target_file="$finalflarumconf"

# Execute post-installation
pushd $final_path
  exec_as $app php$phpversion -d $final_path -d memory_limit=-1 flarum install -f configuration.yml
  # Delete configuration.yml as it contains sensitive data
  ynh_secure_remove $finalflarumconf
popd

# Email setup
sql_command="REPLACE INTO \`settings\` (\`key\`, \`value\`) VALUES
  ('mail_driver', 'mail'),
  ('mail_encryption', 'ssl'),
  ('mail_from', '$app@$domain'),
  ('mail_host', 'localhost'),
  ('mail_port', '587');"
ynh_mysql_execute_as_root --sql="$sql_command" --database=$db_name

# Enable and set up the SSOwat auth extension
ynh_script_progression --message="Enabling and configuring SSOwat extension..." --weight=2
activate_flarum_extension $db_name "tituspijean-auth-ssowat"
ssowatdomain=$(</etc/yunohost/current_host)
sql_command="INSERT INTO \`settings\` (\`key\`, \`value\`) VALUES ('tituspijean-auth-ssowat.domain', '$ssowatdomain'), ('tituspijean-auth-ssowat.onlyUse', '0');"
ynh_mysql_execute_as_root --sql="$sql_command" --database=$db_name

# Install, activate and set language extensions
case $language in
  fr)
    ynh_script_progression --message="Installing French extension..." --weight=2
    ynh_composer_exec --user=$app --phpversion=$phpversion --workdir=$final_path --commands="require milescellar/lang-french"
    activate_flarum_extension $db_name "milescellar-lang-french"
    sql_command="UPDATE \`settings\` SET \`value\` = 'fr' WHERE \`settings\`.\`key\` = 'default_locale'"
    ynh_mysql_execute_as_root --sql="$sql_command" --database=$db_name
    ;;
  de)
    ynh_script_progression --message="Installing German extension..." --weight=2
    ynh_composer_exec --user=$app --phpversion=$phpversion --workdir=$final_path --commands="require cbmainz/flarum-de"
    activate_flarum_extension $db_name "cbmainz-de"
    sql_command="UPDATE \`settings\` SET \`value\` = 'de' WHERE \`settings\`.\`key\` = 'default_locale'"
    ynh_mysql_execute_as_root --sql="$sql_command" --database=$db_name
    ;;
esac

if [ $bazaar_extension -eq 1 ]; then
  ynh_script_progression --message="Installing Bazaar extension..." --weight=2
  ynh_composer_exec --user=$app --phpversion=$phpversion --workdir=$final_path --commands="require extiverse/bazaar"
fi

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions to app files
chown -R $app:www-data $final_path

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Configuring log rotation..."

# Use logrotate to manage application logfile(s)
ynh_use_logrotate

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Configuring SSOwat..." --weight=1

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# Everyone can access the app.
	# The "main" permission is automatically created before the install script.
	ynh_permission_update --permission "main" --add "visitors"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# SEND CREDENTIALS TO ADMIN
#=================================================
ynh_script_progression --message="Sending generated admin credentials by email, but you can log in with your YunoHost credentials!" --weight=1

app_message="User : $admin, password : $admin_pwd
Change your password!
Your forum is accessible at https://$domain$path_url"
ynh_send_readme_to_admin "$app_message" "$admin"
ynh_print_warn "$app_message"

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Installation of $app completed"
