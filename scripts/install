#!/bin/bash

# Exit on command errors and treat unset variables as an error
set -eu

# This is a multi-instance app, meaning it can be installed several times independently
# The id of the app as stated in the manifest is available as $YNH_APP_ID
# The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
# The app instance name is available as $YNH_APP_INSTANCE_NAME
#    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
#    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
#    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
# The app instance name is probably what you are interested the most, since this is
# guaranteed to be unique. This is a good unique identifier to define installation path,
# db names, ...
app=$YNH_APP_INSTANCE_NAME

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path=$YNH_APP_ARG_PATH
admin=$YNH_APP_ARG_ADMIN
is_public=$YNH_APP_ARG_IS_PUBLIC
final_path=/var/www/$app

# Source YunoHost helpers
source /usr/share/yunohost/helpers

#Â Save app settings
ynh_app_setting_set "$app" admin "$admin"
ynh_app_setting_set "$app" is_public "$is_public"

# Check domain/path availability
sudo yunohost app checkurl "${domain}${path}" -a "$app" \
    || ynh_die "Path not available: ${domain}${path}"


### composer ###
# Install or update composer (https://getcomposer.org)
composerinstall=/tmp/composer-install
if [ -d "$composerinstall" ]; then
  sudo rm -rf $composerinstall
fi
sudo mkdir $composerinstall
EXPECTED_SIGNATURE=$(wget https://composer.github.io/installer.sig -O - -q)
sudo php -r "copy('https://getcomposer.org/installer', '$composerinstall/composer-setup.php');"
ACTUAL_SIGNATURE=$(php -r "echo hash_file('SHA384', '$composerinstall/composer-setup.php');")
if [ "$EXPECTED_SIGNATURE" = "$ACTUAL_SIGNATURE" ]
then
    sudo php "$composerinstall/composer-setup.php" --install-dir=/usr/local/bin
    RESULT=$?
    sudo rm "$composerinstall/composer-setup.php"
else
    >&2 echo 'ERROR: Invalid installer signature'
    sudo rm "$composerinstall/composer-setup.php"
    exit 1
fi
if [ $RESULT != 0 ]
then
	exit $RESULT
fi
sudo rm -rf $composerinstall

### composer end ###

sudo mkdir -p $final_path
sudo chown -R www-data:www-data $final_path

### Install flarum
sudo su - www-data -s /bin/bash -c "composer.phar create-project flarum/flarum "$final_path" --stability=beta"

### MySQL (can be removed if not used) ###
# If your app use a MySQL database you can use these lines to bootstrap
# a database, an associated user and save the password in app settings.
#
# # Generate MySQL password and create database
dbuser=$app
dbname=$app
dbpass=$(ynh_string_random 15)
ynh_app_setting_set "$app" mysqlpwd "$dbpass"
ynh_mysql_create_db "$dbname" "$dbuser" "$dbpass"

# Install

# Modify Nginx configuration file and copy it to Nginx conf directory
nginx_conf=../conf/nginx.conf
sed -i "s@YNH_WWW_PATH@$path@g" $nginx_conf
sed -i "s@YNH_WWW_ALIAS@$app/@g" $nginx_conf
# If a dedicated php-fpm process is used:
# Don't forget to modify ../conf/nginx.conf accordingly or your app will not work!
sed -i "s@YNH_WWW_APP@$app@g" $nginx_conf
sudo cp $nginx_conf /etc/nginx/conf.d/$domain.d/$app.conf

### PHP ###
# Modify PHP-FPM pool configuration and copy it to the pool directory
sed -i "s@YNH_WWW_APP@$app@g" ../conf/php-fpm.conf
sed -i "s@YNH_WWW_ALIAS@$app/@g" ../conf/php-fpm.conf
finalphpconf=/etc/php5/fpm/pool.d/$app.conf
sudo cp ../conf/php-fpm.conf $finalphpconf
sudo chown root: $finalphpconf
sudo chmod 644 $finalphpconf
sudo service php5-fpm reload
### PHP end ###

# If app is public, add url to SSOWat conf as skipped_uris
if [[ $is_public -eq 1 ]]; then
  # unprotected_uris allows SSO credentials to be passed anyway.
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Reload services
sudo service nginx reload
echo "MySQL database user is " $dbuser
echo "MySQL database password is " $dbpass
