#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source experimental_helpers/_ynh_add_extra_apt_repos
source experimental_helpers/ynh_install_php
source experimental_helpers/ynh_exec_as
source experimental_helpers/ynh_composer
source experimental_helpers/ynh_send_readme_to_admin
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..." --time --weight=1

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
db_pwd=$(ynh_app_setting_get --app=$app --key=db_pwd)
old_project_version=$(ynh_app_setting_get --app=$app --key=project_version)
old_core_version=$(ynh_app_setting_get --app=$app --key=core_version)
old_ssowat_version=$(ynh_app_setting_get --app=$app --key=ssowat_version)
bazaar_extension=$(ynh_app_setting_get --app=$app --key=bazaar_extension)

#=================================================
# CHECK VERSION
#=================================================

### This helper will compare the version of the currently installed app and the version of the upstream package.
### $upgrade_type can have 2 different values
### - UPGRADE_APP if the upstream app version has changed
### - UPGRADE_PACKAGE if only the YunoHost package has changed
### ynh_check_app_version_changed will stop the upgrade if the app is up to date.
### UPGRADE_APP should be used to upgrade the core app only if there's an upgrade to do.
upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..." --time --weight=1

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

# Cleaning legacy permissions
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
skipped_uris=$(ynh_app_setting_get --app=$app --key=skipped_uris)
unprotected_uris=$(ynh_app_setting_get --app=$app --key=unprotected_uris)
protected_uris=$(ynh_app_setting_get --app=$app --key=protected_uris)

# Remove is_public if exists
if [ ! -z "$is_public" ]; then
	ynh_app_setting_delete --app=$app --key=is_public
fi

# Remove skipped_uris if exists
if [ ! -z "$skipped_uris" ]; then
	ynh_app_setting_delete --app=$app --key=skipped_uris
fi

# Remove unprotected_uris if exists
if [ ! -z "$unprotected_uris" ]; then
	ynh_app_setting_delete --app=$app --key=unprotected_uris
fi

# Remove protected_uris if exists
if [ ! -z "$protected_uris" ]; then
	ynh_app_setting_delete --app=$app --key=protected_uris
fi

# Remove the v before version number
if [[ $old_project_version == "v*" ]]; then $old_project_version = ${old_project_version:1}; fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..." --time --weight=1

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
# N.B. : this is for app installations before YunoHost 2.7
# where this value might be something like /foo/ or foo/
# instead of /foo ....
# If nobody installed your app before 2.7, then you may
# safely remove this line
path_url=$(ynh_normalize_url_path --path_url=$path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..." --time --weight=1

# Bug in Nginx with locations and aliases (see http://stackoverflow.com/a/35102259 )
if [ $path_url = "/" ]; then
  ynh_replace_string "__PATH_HACK__" "" "../conf/nginx.conf"
else
  ynh_replace_string "__PATH_HACK__" "$path_url" "../conf/nginx.conf"
fi

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE PHP7.3
#=================================================

if [ "$(lsb_release --codename --short)" = "buster" ]; then
	pkg_dependencies="$pkg_dependencies $extra_pkg_dependencies"
else
	ynh_print_info --message="Upgrading php${php_version}..."
	ynh_install_php --phpversion="${php_version}" --package="$extra_pkg_dependencies"
fi

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info --message="Upgrading dependencies..."

_ynh_install_app_dependencies "$pkg_dependencies"

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..." --time --weight=1

# Create a dedicated user (if not existing)
ynh_system_user_create $app $final_path
# Adding it to www-data group
usermod -a -G www-data $app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading php-fpm configuration..." --time --weight=1

# Create a dedicated php-fpm config
ynh_add_fpm_config $php_version

#=================================================
# SPECIFIC UPGRADE
#=================================================
# COMPOSER AND FLARUM UPGRADE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..." --time --weight=1

	# Backing up the app directory
	tmpbak="/tmp/${app}backup"
	ynh_secure_remove --file="$tmpbak"
	mkdir -p $tmpbak
	cp -R $final_path/* $tmpbak

	# Deleting current app directory
	ynh_secure_remove --file="$final_path"

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"

	# Setting user rights
	chown -R $app:www-data $final_path
	chmod -R 775 $final_path

	# Install Composer and Flarum
	ynh_install_composer --user=$app --phpversion=$php_version --workdir=$final_path

	# Copy config.php back into Flarum
	cp -f $tmpbak/config.php $final_path

	# Copy assets from old app version. Can be either in root folder or in "public" folder
	if [ -d $tmpbak/assets ]; then
		cp -Rf $tmpbak/assets $final_path/public
	fi
	if [ -d $tmpbak/public/assets ]; then
		cp -Rf $tmpbak/public/assets $final_path/public
	fi

	# Clean temp directory
	ynh_secure_remove $tmpbak

	# Set right permissions
	chown -R $app: $final_path
	chown -R $app:www-data $final_path/storage
	chmod -R 775 $final_path

	# Perform migrations and clear cache
	pushd $final_path
		exec_as $app ynh_composer_exec --phpversion=$php_version --workdir=$final_path \
			--commands="update --prefer-dist --no-dev -a --with-all-dependencies"
		exec_as $app php$php_version flarum migrate
		exec_as $app php$php_version flarum cache:clear
	popd
fi

#=================================================
# FLARUM EXTENSIONS
#=================================================

if ! exec_as $app php$php_version flarum info | grep -q "tituspijean-auth-ssowat" | grep -q $ssowat_version;
then
	# Install and activate the SSOwat auth extension
	install_and_activate_extension $app $php_version $final_path $db_name "tituspijean/flarum-ext-auth-ssowat:$ssowat_version" "tituspijean-auth-ssowat"
	# Configure SSOwat auth extension
	ssowatdomain=$(</etc/yunohost/current_host)
	sql_command="INSERT IGNORE INTO \`settings\` (\`key\`, \`value\`) VALUES ('tituspijean-auth-ssowat.domain', '$ssowatdomain'), ('tituspijean-auth-ssowat.onlyUse', '0');"
	ynh_mysql_execute_as_root "$sql_command" $db_name
fi

# Install, activate and set language extensions
case $language in
  en)
    ynh_script_progression --message="Installing French extension..." --time --weight=2
    install_and_activate_extension $app $php_version $final_path $db_name "flarum/lang-english" "flarum-lang-english"
    sql_command="UPDATE \`settings\` SET \`value\` = 'en' WHERE \`settings\`.\`key\` = 'default_locale'"
    ynh_mysql_execute_as_root "$sql_command" $db_name
    ;;
  fr)
    ynh_script_progression --message="Installing French extension..." --time --weight=2
    install_and_activate_extension $app $php_version $final_path $db_name "milescellar/flarum-ext-french" "milescellar-french"
    sql_command="UPDATE \`settings\` SET \`value\` = 'fr' WHERE \`settings\`.\`key\` = 'default_locale'"
    ynh_mysql_execute_as_root "$sql_command" $db_name
    ;;
  de)
    ynh_script_progression --message="Installing German extension..." --time --weight=2
    install_and_activate_extension $app $php_version $final_path $db_name "cbmainz/flarum-de" "cbmainz-de"
    sql_command="UPDATE \`settings\` SET \`value\` = 'de' WHERE \`settings\`.\`key\` = 'default_locale'"
    ynh_mysql_execute_as_root "$sql_command" $db_name
    ;;
esac
ynh_print_info "You may need to manually enable your language extension in Flarum's admin panel."

if [ $bazaar_extension -eq 1 ]; then
   install_and_activate_extension $app $php_version $final_path $db_name "flagrow/bazaar" "flagrow-bazaar"
fi

# Clear Flarum's cache
exec_as $app php$php_version flarum cache:clear

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..." --time --weight=1

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

# Set permissions on app files
chown -R $app: $final_path
chown -R $app:www-data $final_path/storage
chmod -R 775 $final_path

#=================================================
# SETUP PERMISSIONS
#=================================================

#ynh_script_progression --message="Upgrading permissions configuration..." --time --weight=1

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..." --time --weight=1

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_app_setting_set $app php_version $php_version
ynh_app_setting_set $app project_version $project_version
ynh_app_setting_set $app core_version $core_version
ynh_app_setting_set $app ssowat_version $ssowat_version

ynh_script_progression --message="Upgrade of $app completed" --time --last
